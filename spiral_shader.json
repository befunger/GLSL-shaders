{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[],"code":"const float pi = 3.141592654;\n\n// Palette function with params from http://dev.thi.ng/gradients/\nvec3 palette ( float t) \n{\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(1.0, 1.0, 1.0);\n    vec3 d = vec3(0.263, 0.416, 0.557);\n    \n    return a + b*cos(6.28318*(c*t+d));\n}\n\n// Returns a moving spiral from uv\nfloat spiral (vec2 uv)\n{\n    float a = 1.0;  // Number of \"tails\" branching from center.\n    float b = 3.0;  // Density of spiral (number of rings on screen)\n    float c = 1.0;  // Amount of fisheye effect (Try ~10 for De Moivre patterns!)\n    float d = 0.5;  // Speed of propagation \n    \n    // Polar coordinates for spiral\n    float r = length(uv);\n    float theta = atan(uv.y, uv.x);\n    \n    return fract(0.5* a * theta / pi + b * pow(r, c) - d * iTime);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n    // Normalise to (-1, 1) \n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    \n    float d_spiral = spiral(uv);\n    \n    vec3 col = palette(length(uv));\n\n    vec3 final_color = d_spiral * col;\n\n    fragColor = vec4(final_color, 1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"-1","date":"1358124981","viewed":0,"name":"","username":"None","description":"","likes":0,"hasliked":0,"tags":[],"published":0}}